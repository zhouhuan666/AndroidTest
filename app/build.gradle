plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    namespace 'com.gdet.testapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.gdet.testapp"
        minSdk 30
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // 添加 lint 选项以忽略隐藏 API 的问题
    lintOptions {
        disable 'InvalidPackage'
        disable 'RestrictedApi'
        // 如果需要，可以添加更多需要禁用的 lint 检查
    }

    // 添加对隐藏 API 的访问支持
    kotlinOptions {
        freeCompilerArgs += [
                '-Xskip-prerelease-check',
                '-Xjvm-default=all'
        ]
    }

    // 添加这个配置来处理资源冲突
//    androidResources {
//        additionalParameters "--allow-reserved-package-id"
//    }

    signingConfigs {
        sign {
            storeFile file("../platform.jks")
            storePassword '123456'
            keyAlias = 'test'
            keyPassword '123456'
        }
        create("release") {
            storeFile = file("../E541.keystore")
            keyAlias = "benteng"
            keyPassword = "benteng"
            storePassword = "benteng"
            enableV1Signing = true
            enableV2Signing = true
        }
    }

    buildTypes {
        debug {
//            signingConfig signingConfigs.sign
            signingConfig = signingConfigs.getByName("release")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
//            signingConfig signingConfigs.sign
            signingConfig = signingConfigs.getByName("release")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().classpath =
                files("libs/framework13.jar") + variant.javaCompileProvider.get().classpath
    }
}

//gradle.projectsEvaluated {
//    tasks.withType(JavaCompile) {
//        Set<File> fileSet = options.bootstrapClasspath.getFiles()
//        List<File> newFileList = new ArrayList<>()
//        newFileList.add(new File("libs/framework13.jar"))
//        newFileList.addAll(fileSet)
//        options.bootstrapClasspath = files(newFileList.toArray())
//    }
//}

// 添加编译时类路径配置
//gradle.projectsEvaluated {
//    tasks.withType(JavaCompile) {
//        if (options.bootstrapClasspath == null) {
//            options.bootstrapClasspath = files(new File("libs/framework13.jar"))
//        } else {
//            Set<File> fileSet = options.bootstrapClasspath.files
//            List<File> newFileList = new ArrayList<>()
//            newFileList.add(new File("libs/framework13.jar"))
//            newFileList.addAll(fileSet)
//            options.bootstrapClasspath = files(newFileList.toArray())
//        }
//    }
//}


//修改点三 ：调整Android SDK优先级
//gradle.buildFinished {
//    //这里可以配置多个modules模块使用framework.jar包
//    String[] modules = ["app"]
//    for (String m : modules) {
//        def imlFile = file("../.idea/modules/${m}/AndroidTest.${m}.iml")
//        try {
//            def parsedXml = (new XmlParser()).parse(imlFile)
//            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
//            parsedXml.component[1].remove(jdkNode)
//            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
//            new groovy.util.Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
//            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
//        } catch (FileNotFoundException e) {
//            e.printStackTrace()
//        }
//    }
//}


dependencies {
    compileOnly files("libs/framework13.jar")

    implementation 'androidx.annotation:annotation:1.7.1'

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation project(":annotations")
    annotationProcessor project(":annotation_processor")
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.2"
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.5.21"
    implementation "com.squareup.okhttp3:okhttp:4.11.0"
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation "com.squareup.retrofit2:retrofit-mock:2.9.0"
    testImplementation "com.squareup.retrofit2:retrofit-mock:2.9.0"
    androidTestImplementation "com.squareup.retrofit2:retrofit-mock:2.9.0"
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation "androidx.bluetooth:bluetooth:1.0.0-alpha02"


    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.8.2"
    implementation 'com.blankj:utilcodex:1.31.1'
    implementation("io.coil-kt.coil3:coil:3.0.2")
    implementation("io.coil-kt.coil3:coil-network-okhttp:3.0.2")
    implementation("com.github.liangjingkanji:BRV:1.6.1")

    implementation 'com.belerweb:pinyin4j:2.5.1'


    implementation(platform("androidx.compose:compose-bom:2024.02.00"))
    implementation("androidx.activity:activity-compose:1.8.2")
    // other dependencies
    // Compose
    implementation("androidx.compose.material3:material3")
    implementation("com.google.accompanist:accompanist-themeadapter-material3:0.28.0")
    implementation project(":testSDK")
//    implementation files("libs/framework-bluetooth.jar")


    debugImplementation("androidx.compose.ui:ui-tooling")
}

// 添加这个配置来处理隐藏 API 的访问
//configurations.all {
//    resolutionStrategy {
//        force 'androidx.core:core-ktx:1.12.0'  // 确保使用最新版本
//    }
//}

// 添加这个任务来修复 IDE 索引
//tasks.register('fixIdeaImports') {
//    doLast {
//        def ideaDir = file('.idea')
//        if (ideaDir.exists()) {
//            def libraries = new File(ideaDir, 'libraries')
//            if (libraries.exists()) {
//                libraries.listFiles().each { file ->
//                    if (file.name.contains('Gradle') && file.text.contains('framework13.jar')) {
//                        def text = file.text
//                        text = text.replace('<CLASSES>', '<CLASSES>\n      <root url="jar://$PROJECT_DIR$/app/libs/framework13.jar!/" />')
//                        file.text = text
//                        println "Updated ${file.name}"
//                    }
//                }
//            }
//        }
//    }
//}

// 在项目评估后执行
//afterEvaluate {
//    // 确保 framework13.jar 被正确处理
//    android.applicationVariants.all { variant ->
//        variant.javaCompileProvider.get().classpath += files("$projectDir/libs/framework13.jar")
//    }
//}